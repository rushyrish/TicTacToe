//tu$rn=0 means player1 and 1=means player2

#include<GL/glut.h>
#include<stdio.h>
#include<conio.h>

static float d=0.2;

GLfloat diagram[2][16]={{100,100,400,400,100,100,400,400,180,180,210,210,330,330,300,300},
						{120,150,150,120,250,280,280,250,50,350,350,30,50,350,350,30}};

int a[3][3]={{9,9,9},{9,9,9},{9,9,9}};
int r=0;
int turn=0,count=0,flag=0,temp=1,position=10;
int k=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,key=0;

void textdisp(int x, int y,int z,char *str)
{

	glRasterPos3f(x,y,z);
	for(char* c=str;*c!='\0';c++)
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,*c);
}

void drawdiagram()
{
	glColor3f(0.0,1.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(diagram[0][0],diagram[1][0]);
	glVertex2f(diagram[0][1],diagram[1][1]);
	glVertex2f(diagram[0][2],diagram[1][2]);
	glVertex2f(diagram[0][3],diagram[1][3]);
	glEnd();

	glColor3f(0.0,1.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(diagram[0][4],diagram[1][4]);
	glVertex2f(diagram[0][5],diagram[1][5]);
	glVertex2f(diagram[0][6],diagram[1][6]);
	glVertex2f(diagram[0][7],diagram[1][7]);
	glEnd();

	glColor3f(0.0,1.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(diagram[0][8],diagram[1][8]);
	glVertex2f(diagram[0][9],diagram[1][9]);
	glVertex2f(diagram[0][10],diagram[1][10]);
	glVertex2f(diagram[0][11],diagram[1][11]);
	glEnd();

	glColor3f(0.0,1.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(diagram[0][12],diagram[1][12]);
	glVertex2f(diagram[0][13],diagram[1][13]);
	glVertex2f(diagram[0][14],diagram[1][14]);
	glVertex2f(diagram[0][15],diagram[1][15]);
	glEnd();

	glColor3f(.3,.2,.4);
	glBegin(GL_POLYGON);
	glVertex2f(162,490);
	glVertex2f(162,450);
	glVertex2f(365,450);
	glVertex2f(365,490);
	glEnd();
    
	glColor3f(1,1,1);
	glLineWidth(2.5);
	glBegin(GL_LINE_LOOP);
	glVertex2f(162,490);
	glVertex2f(162,450);
	glVertex2f(365,450);
	glVertex2f(365,490);
	glEnd();

	
	glColor3f(.3,.2,.4);
	glBegin(GL_POLYGON);
	glVertex2f(430,445);
	glVertex2f(488,445);
	glVertex2f(488,413);
	glVertex2f(430,413);
	glEnd();

	glColor3f(1,1,1);
	glBegin(GL_LINE_LOOP);
	glVertex2f(430,445);
	glVertex2f(488,445);
	glVertex2f(488,413);
	glVertex2f(430,413);
	glEnd();

	glColor3f(.3,.2,.4);
	glBegin(GL_POLYGON);
	glVertex2f(30,455);
	glVertex2f(98,455);
	glVertex2f(98,423);
	glVertex2f(30,423);
	glEnd();

	glColor3f(1,1,1);
	glBegin(GL_LINE_LOOP);
	glVertex2f(30,455);
	glVertex2f(98,455);
	glVertex2f(98,423);
	glVertex2f(30,423);
	glEnd();
}
void output(GLfloat x,GLfloat y,char * text)
{
	char *p;
	glPushMatrix();
	glTranslatef(x,y,0);
	glScaled(0.2,0.2,0);
	for(p=text;*p;p++)
		glutStrokeCharacter(GLUT_STROKE_ROMAN,*p);
	glPopMatrix();
}


void myInit(void)
{
    glClearColor( 0.0, 0.0, 0.0, 0.0 );
   glClearDepth( 1.0 );
	//specify the light source 0
    GLfloat diffuseMaterial[4] = { 0.0, 0.0, 0.0, 1.0 };
    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat light_position[] = { 0.1, 0.1, 0.1, 0.0 };
    glShadeModel (GL_SMOOTH);
    glEnable(GL_DEPTH_TEST);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, diffuseMaterial);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialf(GL_FRONT, GL_SHININESS, 25.0);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
	glColorMaterial(GL_FRONT, GL_DIFFUSE);
    glEnable(GL_COLOR_MATERIAL);
}

static void Animate(void)
{
	
	{
		glClear( GL_DEPTH_BUFFER_BIT);
		//glClearColor(0.0,0.0,0.0,1.0);
		glLoadIdentity();
		myInit();
		//glPushMatrix();
	// Back off nine units to be able to view from a distance of 1 from the y axis.
		
	// Rotate around the plane of the elliptic orbit
		

		glPushMatrix();
		glTranslatef ( 0.0, 1.0, -10.50 );
	
		d+=1;
		
		glRotatef( 75.0, 1.0,1.0, 0.0 );

		glRotatef( 0.99*d, 0.0, 1.0, 0.0 );
		
		glColor3f(  0.5, 0.2, .2 );
        glPushMatrix(); // Save matrix state
		glTranslatef( 5.0, 0.0, 0.0 );
		//glutSolidCube(.15);
 		glutSolidSphere( 0.1, 25, 25);
		glPopMatrix();
		// Restore matrix state
		glRotatef( 360.0*d/365.0, 0.0, 1.0, 0.0 );

		glPushMatrix(); // Save matrix state
		glTranslatef( -5.0, 0.0, 0.0 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 0.0, 0.0, 5.0 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 0.0, 0.0, -5.0 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 3.535, 0.0, 3.535 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
			
		glPushMatrix();
		glTranslatef( -3.535, 0.0, 3.535 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 3.535, 0.0, -3.535 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( -3.535, 0.0, -3.535 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
		//glPopMatrix();
		

	glPushMatrix();
			//glTranslatef ( 1.0, 1.0, -8.50 );
	
		d+=1;
		//glLoadIdentity();
		//glRotatef(75.0, 1.0,1.0, 0.0 );

		glRotatef( -360.0*d/365.0, 0.0, 0.0, 0.0 );
		glColor3f( 0.05, 0.2, .2 );

		glPushMatrix(); // Save matrix state
		glTranslatef( 5.0, 0.0, 0.0 );
 		glutSolidSphere(0.1, 25, 25);
		glPopMatrix();
		// Restore matrix state
		//glRotatef( 360.0*d/365.0, 0.0, 1.0, 0.0 );

		glPushMatrix(); // Save matrix state
		glTranslatef( -5.0, 0.0, 0.0 );
 		glutSolidSphere(0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 0.0, 0.0, 5.0 );
 		glutSolidSphere(0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 0.0, 0.0, -5.0 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 3.535, 0.0, 3.535 );
		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
			
		glPushMatrix();
		glTranslatef( -3.535, 0.0, 3.535 );
 		glutSolidSphere(0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( 3.535, 0.0, -3.535 );
 		glutSolidSphere( 0.05, 25, 25);
		glPopMatrix();
	
		glPushMatrix();
		glTranslatef( -3.535, 0.0, -3.535 );
 		glutSolidSphere(0.05, 25, 25);
		glPopMatrix();
		glPopMatrix();
		

	// Flush the pipeline, and swap the buffers
		glFlush();
		glutSwapBuffers();
		key++;
		glutPostRedisplay(); // Request a re-draw for animation purposes
	}
}


void display()
{
	
glClear(GL_DEPTH_BUFFER_BIT);

if(temp==1)
{

	glMatrixMode( GL_PROJECTION );
   	 glLoadIdentity();
    gluPerspective( 60.0, 1.0, 1.0, 400.0 );

	// Select the Modelview matrix
    	glMatrixMode( GL_MODELVIEW );

		
	
	
	glPushMatrix();
	
	glLoadIdentity();
		glColor3f(  0.8, 0.8, .8 );
	textdisp(-3,3,-7,"->'W E L C O M E   T O   O U R   G A M E   Z O N E'<-");
glColor3f(1.0,0.0,0.0);
	textdisp(-3,2,-7,"P R E S S   'E S C A P E'  K E Y ");
	
	glColor3f(1.0,0.0,0.0);
	textdisp(-2,1,-5," T O  S T A R T  T H E  G A M E");
	glColor3f(0.2,.7,.3);//QUEUE COLOR
	textdisp(0,1,-10," Developed By ");
	glColor3f(1.0,0.5,0.8);
	textdisp(1.0,0,-20,"->RISHU KUMAR ");
	textdisp(1.0,-2,-20,"->ROHIT N");
	glPopMatrix();
	glFlush();
	
	glMatrixMode( GL_PROJECTION );
   	 glLoadIdentity();
    gluPerspective( 60.0, 1.0, 1.0, 400.0 );

	// Select the Modelview matrix
    	glMatrixMode( GL_MODELVIEW );

	
        Animate();
		glDisable(GL_LIGHT0);
		glDisable(GL_LIGHTING);
		glDisable(GL_COLOR_MATERIAL);
		glDisable(GL_DEPTH_TEST);

}



else if(temp==2)
{
		glClear( GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glClearColor(0.0,0.0,0.0,1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0,499.0,0.0,499.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
		
	drawdiagram();
	glColor3f(1.0,0.0,1.0);
	output(180,460,"TIC-TAC-TOE");
	glColor3f(0.0,1.0,1.0);
	textdisp(443,424,0,"QUIT");
	textdisp(35,434,0,"RESTART");
	   	
	glFlush();
}
}

void assign( int b[3][3],int position, const int turn)
{
	
	switch (position)
	{
		case 0: if(k==0)b[0][0]=turn,k++;
		    break;
		case 1:if(l==0)b[0][1]=turn,l++;
		    break;
		case 2:if(m==0)b[0][2]=turn,m++;
		    break;
		case 3:if(n==0)b[1][0]=turn,n++;
		    break;
		case 4:if(o==0)b[1][1]=turn,o++;
		    break;
		case 5:if(q==0)b[1][2]=turn,q++;
		    break;
		case 6:if(s==0)b[2][0]=turn,s++;
		    break;
		case 7:if(t==0)b[2][1]=turn,t++;
		    break;
		case 8:if(u==0)b[2][2]=turn,u++;
		    break;
	}
}

int drawline(int x0,int y0,int x1,int y1)
{ 
//	int b[3][3];
	glColor3f(0.3,0.5,0.6);
	glLineWidth(3.0);
	glBegin(GL_LINES);
	glVertex2i(x0,y0);
	glVertex2i(x1,y1);
	glEnd();
	glFlush();
	return 1;
}

int check(int b[3][3],int p)
{	
	if(b[0][0]==p && b[1][1]==p && b[2][2]==p) 
		return r=drawline(110,360,390,50),flag=1;
	else if(b[0][0]==p && b[0][1]==p && b[0][2]==p)
		return	r=drawline(100,320,400,320),flag=1;
	else if(b[1][0]==p && b[1][1]==p && b[1][2]==p)
		return	r=drawline(100,200,400,200),flag=1;
	else if(b[2][0]==p && b[2][1]==p && b[2][2]==p)
		return  r=drawline(100,80,400,80),flag=1;
	else if(b[0][0]==p && b[1][0]==p && b[2][0]==p)
		return	r=drawline(145,380,145,50),flag=1;
	else if(b[0][1]==p && b[1][1]==p && b[2][1]==p)
		return	r=drawline(255,380,255,50),flag=1;
	else if(b[0][2]==p && b[1][2]==p && b[2][2]==p)
		return	r=drawline(365,380,365,50),flag=1;
	else if (b[2][0]==p && b[1][1]==p && b[0][2]==p)
		return	r=drawline(120,50,400,360),flag=1;
	else 
		return 0;
}

void draw(int x0,int y0,int x1,int x2,int y1,int y2,int turn)
{  

	if(turn==0)
	{
		glColor3f(1.0,0.0,0.0);
		glBegin(GL_TRIANGLE_STRIP);
		glVertex2i(x0,y0);
		glVertex2i(x1,y0);
		glVertex2i(x2,y1);
		glVertex2i(x2,y2);
		glEnd();
		glFlush();
	}
	else
	{
		glColor3f(0.0,0.0,1.0);
		glBegin(GL_TRIANGLE_STRIP);
		glVertex2i(x0,y0);
		glVertex2i(x1,y0);
		glVertex2i(x2,y1);
		glVertex2i(x2,y2);
		glEnd();
		glFlush();
	}
	position=9;

}	

void insert(int position)
{	
	if(position==0 && k==1 && r==0)
		draw(120,320,170,145,340,290,turn);
	else if(position==1&& l==1&& r==0 )
		draw(230,320,280,255,340,290,turn);
	else if(position==2&& m==1&& r==0)
		draw(340,320,390,365,340,290,turn);
	else if(position==3&& n==1&& r==0)
		draw(120,200,170,145,220,170,turn);
	else if(position==4&& o==1&& r==0)
		draw(230,200,280,255,220,170,turn);
	else if(position==5&& q==1&& r==0)
		draw(340,200,390,365,220,170,turn);
	else if(position==6&& s==1&& r==0)
		draw(120,80,170,145,100,50,turn);
	else if(position==7&& t==1&& r==0)
		draw(230,80,280,255,100,50,turn);
	else if(position==8&& u==1&& r==0)
		draw(340,80,390,365,100,50,turn);
}
void restart()
{
	for(int i=0;i<3;i++)
		for(int j=0;j<3;j++)
			a[i][j]=9;
	r=0;
	turn=0,count=0,flag=0,position=10;
	k=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0;
	glutPostRedisplay();
}
void mouse(int btn,int state,int x,int y)
{
	if(temp==2)
	{
		if(btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
		{
			printf("%d %d",x,y);
			if(x<363 && x>200 && y<325 && y>222&& k==0)
				position=0;
			else if(x<600 && x>421 && y<325 && y>220&&l==0)
				position=1;
			else if(x<800 && x>660 && y<325 && y>220&& m==0)
				position=2;
			else if(x<360 && x>200 && y<510 && y>365&& n==0)
				position=3;
			else if(x<600 && x>421 && y<510 && y>365&& o==0)
				position=4;
			else if(x<800 && x>660 && y<510 && y>365&&q==0)
				position=5;
			else if(x<360 && x>200 && y<700 && y>565&&s==0)
				position=6;
			else if(x<600 && x>421 && y<700 && y>564&&t==0)
				position=7;
			else if(x<800 && x>660 && y<700 && y>565&&u==0)
				position=8;
			else if(x<975 && x>863 && y<124 && y>80)
				exit(0);
			else if(x<194 && x>61 && y<111 && y>66)
				restart();

			if(flag==0 && position<9)
			{
				assign(a,position,turn);
				count++;
				insert(position);
		
				if(count>4)
					r=check(a,turn);
				
				if(r==1)
				{
					glColor3f(0.7,0.5,0.0);
					if(turn==0)
						textdisp(10,390,0,"Game Over ::-> PLAYER 1 WINS");
					else
						textdisp(10,390,0,"Game Over ::-> PLAYER 2 WINS");
					glFlush();
				}
				
				turn=(turn+1)%2;
			}
    		
			if(count>=9&&flag==0&&k==1&&l==1&&m==1&&n==1&&o==1&&q==1&&s==1&&t==1&&u==1)
			{
				glColor3f(0.7,0.5,0.0);
				textdisp(10,390,0," Game Over ::-> MATCH TIED");
				glFlush();	
			}
		}
	}
}

void myKey(unsigned char ch,int x,int y)
{

	switch(ch)
	{
		case 27 : 	temp=2;
		
	}
	glutPostRedisplay();
}



void main(int argc, char** argv)
{
	glutInit(&argc,argv);
	glutInitWindowSize(1000,1000);
	glutInitWindowPosition(0,0);
	glutCreateWindow("tic tac toe");
	glClear( GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glutDisplayFunc(display);
	glutKeyboardFunc(myKey);
	glutMouseFunc(mouse);
	glutMainLoop();
}


